// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/service.go -destination=test/mock/mock_service.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	dto "efmo-test/internal/models/dto"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEfMoService is a mock of EfMoService interface.
type MockEfMoService struct {
	ctrl     *gomock.Controller
	recorder *MockEfMoServiceMockRecorder
	isgomock struct{}
}

// MockEfMoServiceMockRecorder is the mock recorder for MockEfMoService.
type MockEfMoServiceMockRecorder struct {
	mock *MockEfMoService
}

// NewMockEfMoService creates a new mock instance.
func NewMockEfMoService(ctrl *gomock.Controller) *MockEfMoService {
	mock := &MockEfMoService{ctrl: ctrl}
	mock.recorder = &MockEfMoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEfMoService) EXPECT() *MockEfMoServiceMockRecorder {
	return m.recorder
}

// AddSong mocks base method.
func (m *MockEfMoService) AddSong(ctx context.Context, song, group string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSong", ctx, song, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSong indicates an expected call of AddSong.
func (mr *MockEfMoServiceMockRecorder) AddSong(ctx, song, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSong", reflect.TypeOf((*MockEfMoService)(nil).AddSong), ctx, song, group)
}

// DeleteSong mocks base method.
func (m *MockEfMoService) DeleteSong(ctx context.Context, song, group string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSong", ctx, song, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSong indicates an expected call of DeleteSong.
func (mr *MockEfMoServiceMockRecorder) DeleteSong(ctx, song, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSong", reflect.TypeOf((*MockEfMoService)(nil).DeleteSong), ctx, song, group)
}

// GetSongInfo mocks base method.
func (m *MockEfMoService) GetSongInfo(ctx context.Context, song, group string) (dto.Song, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSongInfo", ctx, song, group)
	ret0, _ := ret[0].(dto.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSongInfo indicates an expected call of GetSongInfo.
func (mr *MockEfMoServiceMockRecorder) GetSongInfo(ctx, song, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSongInfo", reflect.TypeOf((*MockEfMoService)(nil).GetSongInfo), ctx, song, group)
}

// GetSongLibrary mocks base method.
func (m *MockEfMoService) GetSongLibrary(ctx context.Context, group, date *string) ([]dto.Song, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSongLibrary", ctx, group, date)
	ret0, _ := ret[0].([]dto.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSongLibrary indicates an expected call of GetSongLibrary.
func (mr *MockEfMoServiceMockRecorder) GetSongLibrary(ctx, group, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSongLibrary", reflect.TypeOf((*MockEfMoService)(nil).GetSongLibrary), ctx, group, date)
}

// GetSongText mocks base method.
func (m *MockEfMoService) GetSongText(ctx context.Context, song, group string, verse int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSongText", ctx, song, group, verse)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSongText indicates an expected call of GetSongText.
func (mr *MockEfMoServiceMockRecorder) GetSongText(ctx, song, group, verse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSongText", reflect.TypeOf((*MockEfMoService)(nil).GetSongText), ctx, song, group, verse)
}

// UpdateSong mocks base method.
func (m *MockEfMoService) UpdateSong(ctx context.Context, song dto.Song) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSong", ctx, song)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSong indicates an expected call of UpdateSong.
func (mr *MockEfMoServiceMockRecorder) UpdateSong(ctx, song any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSong", reflect.TypeOf((*MockEfMoService)(nil).UpdateSong), ctx, song)
}
