// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/storage/interface.go -destination=test/mock/mock_storage.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	dto "efmo-test/internal/models/dto"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateSong mocks base method.
func (m *MockStorage) CreateSong(ctx context.Context, song, group string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSong", ctx, song, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSong indicates an expected call of CreateSong.
func (mr *MockStorageMockRecorder) CreateSong(ctx, song, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSong", reflect.TypeOf((*MockStorage)(nil).CreateSong), ctx, song, group)
}

// DeleteSong mocks base method.
func (m *MockStorage) DeleteSong(ctx context.Context, song, group string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSong", ctx, song, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSong indicates an expected call of DeleteSong.
func (mr *MockStorageMockRecorder) DeleteSong(ctx, song, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSong", reflect.TypeOf((*MockStorage)(nil).DeleteSong), ctx, song, group)
}

// Disconnect mocks base method.
func (m *MockStorage) Disconnect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disconnect")
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockStorageMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockStorage)(nil).Disconnect))
}

// GetSong mocks base method.
func (m *MockStorage) GetSong(ctx context.Context, song, group string) (dto.Song, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSong", ctx, song, group)
	ret0, _ := ret[0].(dto.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSong indicates an expected call of GetSong.
func (mr *MockStorageMockRecorder) GetSong(ctx, song, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSong", reflect.TypeOf((*MockStorage)(nil).GetSong), ctx, song, group)
}

// GetSongList mocks base method.
func (m *MockStorage) GetSongList(ctx context.Context, group, date *string) ([]dto.Song, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSongList", ctx, group, date)
	ret0, _ := ret[0].([]dto.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSongList indicates an expected call of GetSongList.
func (mr *MockStorageMockRecorder) GetSongList(ctx, group, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSongList", reflect.TypeOf((*MockStorage)(nil).GetSongList), ctx, group, date)
}

// GetSongText mocks base method.
func (m *MockStorage) GetSongText(ctx context.Context, song, group string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSongText", ctx, song, group)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSongText indicates an expected call of GetSongText.
func (mr *MockStorageMockRecorder) GetSongText(ctx, song, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSongText", reflect.TypeOf((*MockStorage)(nil).GetSongText), ctx, song, group)
}

// Ping mocks base method.
func (m *MockStorage) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStorageMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStorage)(nil).Ping), ctx)
}

// UpdateSong mocks base method.
func (m *MockStorage) UpdateSong(ctx context.Context, song dto.Song) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSong", ctx, song)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSong indicates an expected call of UpdateSong.
func (mr *MockStorageMockRecorder) UpdateSong(ctx, song any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSong", reflect.TypeOf((*MockStorage)(nil).UpdateSong), ctx, song)
}
